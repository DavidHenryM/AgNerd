// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String?
}

model Graze {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  startDatetime DateTime
  endDateTime   DateTime?
  paddock       Paddock   @relation(fields: [paddockId], references: [id])
  paddockId     String    @unique
  mobIds        String[]  @db.ObjectId
  mob           Mob[]     @relation(fields: [mobIds], references: [id])
}

model Breed {
  id       String        @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  class    StockClass
  members  LivestockUnit @relation(fields: [memberId], references: [id])
  memberId String        @unique
}

model Mob {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId
  members  LivestockUnit[]
  comment  String
  grazeIds String[]        @db.ObjectId
  graze    Graze[]         @relation(fields: [grazeIds], references: [id])
}

model LivestockUnit {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  nlisid          String?
  breed           Breed?
  name            String?
  comment         String?
  sex             Sex
  birthdate       DateTime
  desexed         Boolean
  parentId        String?        @unique @db.ObjectId
  sire            LivestockUnit? @relation("PARENT", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dam             LivestockUnit? @relation("PARENT")
  mob             Mob            @relation(fields: [livestockUnitId], references: [id])
  livestockUnitId String         @unique
  weights         WeightRecord[]
}

// Comments contain a comment string and connect back to the post.
// postId must have @db.ObjectId to match up with Post's id type

model Paddock {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  polygon GeoPoint[]
  graze   Graze[]
}

model GeoPoint {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  latitude  Float
  longitude Float
  paddock   Paddock @relation(fields: [paddockId], references: [id])
  paddockId String  @unique
}

model WeightRecord {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  weight          Float
  dateMeasured    DateTime      @default(now())
  method          WeighMethod   @default(SCALES)
  livestockunitId String
  livestockUnit   LivestockUnit @relation(fields: [livestockunitId], references: [id])
}

enum StockClass {
  CATTLE
  SHEEP
  GOAT
  CAMEL
  ALPACA
  CHICKEN
  DUCK
  TURKEY
}

enum WeighMethod {
  SCALES
  IMAGE_ANALYSIS
  VISUAL_ESTIMATE
  MOB_AVERAGE
}

enum Sex {
  MALE
  FEMALE
}
