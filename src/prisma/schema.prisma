// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output = "generated/"
  formatGeneratedCode = "prettier"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  preferredName String?
  lastName      String
}

model Graze {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  startDatetime     DateTime
  endDateTime       DateTime?
  paddock           Paddock   @relation(fields: [paddockId], references: [id])
  paddockId         String    @unique @db.ObjectId
  mobIds            String[]  @db.ObjectId
  mob               Mob[]     @relation(fields: [mobIds], references: [id])
  dseDaysPerHectare Float?
}

model Breed {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  class           StockClass
  members         LivestockUnit? @relation(fields: [livestockUnitId], references: [id])
  livestockUnitId String?        @unique @db.ObjectId
}

model Mob {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  members  LivestockUnit[]
  comment  String?
  grazeIds String[]        @db.ObjectId
  graze    Graze[]         @relation(fields: [grazeIds], references: [id])
}

model LivestockUnit {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  nlisId                 String?  @unique
  visualIdNumber         String?
  visualIdColour         VisualIdColour?
  class                  StockClass
  breed                  Breed?
  name                   String?
  comment                String?
  sex                    Sex
  birthDate              DateTime
  desexed                Boolean
  sireId               String?              @db.ObjectId @unique
  sire                   LivestockUnit?      @relation("SIRED", fields: [sireId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sired                   LivestockUnit[]      @relation("SIRED")
  damId               String?                  @db.ObjectId @unique
  dam                    LivestockUnit?          @relation("BIRTHED", fields: [damId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  birthed LivestockUnit[]          @relation("BIRTHED")
  mob                    Mob?                     @relation(fields: [mobRef], references: [id])
  mobRef                 String?                  @db.ObjectId
  pregnancy              Pregnancy[]              @relation(fields: [pregnancyId], references: [id])
  pregnancyId            String[]                 @db.ObjectId
  weights                WeightRecord[]
  treatments             ChemicalTreatment[]
  drySheepEquivalent     Int                      @default(1)
  purchasePrice          Float?
  purchaseDate           DateTime?
  angusTechId            String?
  active                 Boolean                  @default(true)
  estimatedBreedingValue EstimatedBreedingValue[]
}

model Pregnancy {
  id                         String          @id @default(auto()) @map("_id") @db.ObjectId
  earliestPossibleConception DateTime?
  latestPossibleConception   DateTime?
  conception                 DateTime?
  dueDate                    DateTime?
  earliestPossibleBirth      DateTime?
  latestPossibleBirth        DateTime?
  parentId                   String[]        @unique @db.ObjectId
  parents                    LivestockUnit[] @relation(fields: [parentId], references: [id])
  pregnancySireId            String          @db.ObjectId
  pregnancyTest              PregnancyTest[]
}

model PregnancyTest {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  testDate    DateTime
  testType    PregnancyTestType
  resultDate  DateTime
  result      PregnancyTestResult
  pregnancyId String              @unique @db.ObjectId
  pregnancy   Pregnancy           @relation(fields: [pregnancyId], references: [id])
  cost        Float?
}

enum PregnancyTestResult {
  PREGNANT
  NOT_PREGNANT
  INCONCLUSIVE
}

enum PregnancyTestType {
  MANUAL_RECTAL_PALPATATION
  ULTRASOUND
  BIOPRYN
}

model ChemicalTreatment {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  liveStockUnit        LivestockUnit     @relation(fields: [livestockUnitId], references: [id])
  livestockUnitId      String            @unique @db.ObjectId
  treatmentDate        DateTime
  applicationMethod    ApplicationMethod
  product              ChemicalProduct   @relation(fields: [chemicalProductId], references: [id])
  chemicalProductId    String            @unique @db.ObjectId
  volumeMl             Int
  witholdingPeriodDays Int               @default(0)
}

model ChemicalProduct {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  manufacturer      String
  productName       String
  serialNumber      String?             @unique
  volumeMl          Int?
  cost              Float?
  type              ChemicalType
  activeIngredients ActiveIngredient[]
  ChemicalTreatment ChemicalTreatment[]
}

model ActiveIngredient {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  ingredient Ingredient
  mgPermL    Float
  product    ChemicalProduct @relation(fields: [productId], references: [id])
  productId  String          @db.ObjectId
}

model EstimatedBreedingValue {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  code            String
  value           Float
  percentile      Float
  accuracy        Float
  livestockUnit   LivestockUnit @relation(fields: [livestockUnitId], references: [id])
  livestockUnitId String        @db.ObjectId
}

enum Ingredient {
  TRICLABENDAZOLE
  ABAMECTIN
}

enum ChemicalType {
  DRENCH
  VACCINE
  SUPPLEMENT
  ANTIBIOTICS
}

enum ApplicationMethod {
  ORAL
  TRANSDERMAL
  SUB_CUT_INJECTION
  INTRAVENUS_INJECTION
}

enum VisualIdColour {
  WHITE
  ORANGE
  LIGHT_GREEN
  PURPLE
  YELLOW
  RED
  SKY_BLUE
  BLACK
}

model Paddock {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  polygon                 GeoPoint[]
  areaHa                  Float
  graze                   Graze[]
  livestockUnitPosition   LivestockUnitPosition? @relation(fields: [livestockUnitPositionId], references: [id])
  livestockUnitPositionId String?                @unique @db.ObjectId
}

model LivestockUnitPosition {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  date     DateTime
  location GeoPoint?
  paddock  Paddock?
}

model GeoPoint {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  latitude                Float
  longitude               Float
  paddock                 Paddock                @relation(fields: [paddockId], references: [id])
  paddockId               String                 @unique @db.ObjectId
  livestockUnitPosition   LivestockUnitPosition? @relation(fields: [livestockUnitPositionId], references: [id])
  livestockUnitPositionId String?                @unique @db.ObjectId
}

model WeightRecord {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  weight          Float
  dateMeasured    DateTime      @default(now())
  method          WeighMethod   @default(SCALES)
  livestockUnit   LivestockUnit @relation(fields: [livestockUnitId], references: [id])
  livestockUnitId String        @unique @db.ObjectId
}

model LoraDevice {
  id               String               @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  deviceId         String
  deviceEui        String
  appEui           String
  appKey           String
  manufacturer     String?
  partNumber       String?
  activationMethod LoraActivationMethod @default(OTAA)
}

enum LoraActivationMethod {
  OTAA
  ABP
}

enum StockClass {
  CATTLE
  SHEEP
  GOAT
  CAMEL
  ALPACA
  LLAMA
  CHICKEN
  DUCK
  TURKEY
}

enum WeighMethod {
  SCALES
  IMAGE_ANALYSIS
  VISUAL_ESTIMATE
  MOB_AVERAGE
}

enum Sex {
  MALE
  FEMALE
}
